{"version":3,"sources":["logo.svg","actions/locationActions.js","LocationDetails.js","LocationComponent.js","App.js","serviceWorker.js","reducers/rootReducer.js","reducers/locationReducer.js","index.js","store.js"],"names":["module","exports","fetchLocationData","dispatch","fetch","method","then","res","json","data","type","payload","catch","err","console","log","LocationDetails","props","className","src","loc","logo_url","name","address","website","store_hours","map","hours","day","start_time","end_time","onClick","backToLocationList","value","LocationComponent","loadLocation","setState","currentLocation","showLocation","state","this","locationReducer","result","index","key","Component","connect","bindActionCreators","App","Boolean","window","location","hostname","match","combineReducers","action","ReactDOM","render","store","initialState","createStore","rootReducer","applyMiddleware","thunk","configureStore","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oGAAAA,EAAOC,QAAU,IAA0B,kC,yNCE9BC,G,YAAoB,kBAAM,SAAAC,GAEnC,OAAOC,MADK,mCACM,CACdC,OAAQ,QACPC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAClBF,MAAM,SAAAG,GACLN,EAAS,CACLO,KATc,oBAUdC,QAASF,OAEdG,OAAM,SAAAC,GACLC,QAAQC,IAAIF,S,eCkCLG,EA7CS,SAACC,GACrB,OACI,oCACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,uBACX,yBAAKA,UAAU,YAAYC,IAAKF,EAAMG,IAAIC,YAE9C,yBAAKH,UAAU,2BACX,6BACI,kDAEID,EAAMG,IAAIE,MAGlB,6BACA,2CAEQL,EAAMG,IAAIG,SAGlB,6BACA,2CAEQN,EAAMG,IAAII,SAGlB,6BACA,yCAEQP,EAAMG,IAAIK,YAAYC,KAAI,SAAAC,GAAK,OAC/B,uCAEWA,EAAMC,IAFjB,YAEwBD,EAAME,WAF9B,YAE4CF,EAAMG,iBAQlE,2BAAOC,QAASd,EAAMe,mBAAoBtB,KAAK,SAASuB,MAAM,cCjCpEC,G,wDACJ,WAAYjB,GAAO,IAAD,8BAChB,cAAMA,IAORkB,aAAe,SAACf,GACd,EAAKgB,SAAS,CAACC,gBAAiBjB,EAAKkB,cAAc,KATnC,EAYlBN,mBAAqB,WACnB,EAAKI,SAAS,CAACE,cAAc,KAX7B,EAAKC,MAAQ,CACTD,cAAc,EACdD,gBAAiB,MAJL,E,iEAkBhBnC,EAD4BsC,KAAKvB,MAA3Bf,uB,+BAIE,IAAD,OACCuC,EAAoBD,KAAKvB,MAAzBwB,gBADD,EAEkCD,KAAKD,MAAvCD,EAFA,EAEAA,aAAcD,EAFd,EAEcA,gBACfK,EAASD,GAAmBA,EAAgBC,QAAU,GAE9D,OADE5B,QAAQC,IAAI0B,GAEZH,EACC,kBAAC,EAAD,CAAiBlB,IAAKiB,EAAiBL,mBAAoBQ,KAAKR,qBAEjE,6BACE,2BAAOd,UAAU,kBACb,+BACI,4BACI,4CACA,8CACA,uCACA,yCAGR,+BAEQwB,EAAOhB,KAAI,SAACnB,EAAKoC,GAAN,OACT,wBAAIC,IAAKD,GACL,4BAAKA,GACL,4BAAI,2BAAOZ,QAAS,kBAAM,EAAKI,aAAa5B,IAAMG,KAAK,SAASuB,MAAS1B,EAAIe,QAC7E,4BAAKf,EAAIiB,SACT,4BAAKjB,EAAIgB,oB,GAhDDsB,cAgEjBC,eALS,SAAAP,GAAK,sBACxBA,MAGsB,SAAApC,GAAQ,OAAI4C,YAAmB,CAAC7C,qBAAoBC,KAChE2C,CAA4CZ,GCnD5Cc,E,kDAdb,WAAY/B,GAAO,uCACXA,G,qDAKR,OACE,6BACE,kBAAC,EAAD,W,GATY4B,aCKEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCfSC,cAAgB,CAC3Bb,gBCJW,WAAyB,IAAxBF,EAAuB,uDAAf,GAAIgB,EAAW,uCACnC,OAAQA,EAAO7C,MACX,IAAK,oBACD,MAAO,CACHgC,OAAQa,EAAO5C,SAEnB,QACI,OAAO4B,MCCvBiB,IAASC,OACP,kBAAC,IAAD,CAAUC,MCLG,WAA0C,IAAlBC,EAAiB,uDAAJ,GAChD,OAAOC,YACHC,EACAF,EACCG,YAAgBC,MDCNC,IACjB,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,QAGFC,SAASC,eAAe,SHqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhE,MAAK,SAAAiE,GACJA,EAAaC,gBAEd5D,OAAM,SAAA6D,GACL3D,QAAQ2D,MAAMA,EAAMC,c","file":"static/js/main.f359bcff.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const SET_LOCATION_DATA = \"SET_LOCATION_DATA\";\r\n\r\nexport const fetchLocationData = () => dispatch => {\r\n    const url = \"https://api.mocki.io/v1/276a0d5c\";\r\n    return fetch(url, {\r\n        method: 'GET',\r\n      }).then(res => res.json())\r\n      .then( data => {\r\n        dispatch({\r\n            type: SET_LOCATION_DATA,\r\n            payload: data\r\n        })\r\n    }).catch(err => {\r\n        console.log(err);\r\n    });\r\n}","import React from \"react\";\r\n\r\nconst LocationDetails = (props) => {\r\n    return(\r\n        <>\r\n            <div className=\"location-detail-container\">\r\n                <div className=\"location-detail-img\">\r\n                    <img className=\"loc-image\" src={props.loc.logo_url}></img>\r\n                </div>\r\n                <div className=\"location-detail-details\">\r\n                    <div>\r\n                        <label>Bussiness Name:</label>\r\n                        {\r\n                            props.loc.name\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                    <label>Address:</label>\r\n                        {\r\n                            props.loc.address\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                    <label>Website:</label>\r\n                        {\r\n                            props.loc.website\r\n                        }\r\n                    </div>\r\n                    <div>\r\n                    <label>Hours:</label>\r\n                        {\r\n                            props.loc.store_hours.map(hours => \r\n                            <div>\r\n                                {\r\n                                    `${hours.day} ${hours.start_time}-${hours.end_time}`\r\n                                }\r\n                            </div>    \r\n                            )\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <input onClick={props.backToLocationList} type=\"button\" value=\"Go Back\"></input>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LocationDetails;","import React, {Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { bindActionCreators } from \"redux\";\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { fetchLocationData } from './actions/locationActions';\r\nimport LocationDetails from \"./LocationDetails\";\r\nimport \"./location.css\";\r\n\r\nclass LocationComponent extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n        showLocation: false,\r\n        currentLocation: null\r\n    }\r\n  }\r\n\r\n  loadLocation = (loc) => {\r\n    this.setState({currentLocation: loc, showLocation: true});\r\n  }\r\n\r\n  backToLocationList = () => {\r\n    this.setState({showLocation: false});\r\n  }\r\n\r\n  componentDidMount(){\r\n  const { fetchLocationData } = this.props;\r\n    fetchLocationData();\r\n  }\r\n\r\n  render() {\r\n    const { locationReducer } = this.props;\r\n    const {showLocation, currentLocation } = this.state;\r\n    const result = locationReducer && locationReducer.result || [];\r\n    console.log(locationReducer);\r\n  return (\r\n    showLocation ? \r\n     <LocationDetails loc={currentLocation} backToLocationList={this.backToLocationList} />\r\n    :\r\n    <div>\r\n      <table className=\"location-table\">\r\n          <thead>\r\n              <tr>\r\n                  <th>Bussiness Id</th>\r\n                  <th>Bussiness Name</th>\r\n                  <th>Website</th>\r\n                  <th>Address</th>\r\n              </tr>\r\n          </thead>\r\n          <tbody>\r\n              {\r\n                  result.map((res, index) => \r\n                    <tr key={index}>\r\n                        <td>{index}</td>\r\n                        <td><input onClick={() => this.loadLocation(res)} type=\"button\" value = {res.name} /></td>\r\n                        <td>{res.website}</td>\r\n                        <td>{res.address}</td>\r\n                    </tr>\r\n                    )\r\n              }\r\n          </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  ...state\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => bindActionCreators({fetchLocationData}, dispatch)\r\nexport default connect(mapStateToProps,mapDispatchToProps)(LocationComponent);\r\n","import React, {Component} from 'react';\nimport { connect } from 'react-redux';\nimport logo from './logo.svg';\nimport './App.css';\nimport { fetchLocationData } from './actions/locationActions';\nimport LocationComponent from './LocationComponent';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n  }\n\n  render() {\n    \n  return (\n    <div>\n      <LocationComponent />\n    </div>\n  );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux';\r\nimport locationReducer from './locationReducer';\r\n\r\nexport default combineReducers({\r\n    locationReducer\r\n});\r\n\r\n","export default (state = {}, action) => {\r\n    switch (action.type) {\r\n        case 'SET_LOCATION_DATA':\r\n            return {\r\n                result: action.payload\r\n            }\r\n            default:\r\n                return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\n\nReactDOM.render(\n  <Provider store={configureStore()}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore , applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\nexport default function configureStore(initialState={}) {\r\n    return createStore(\r\n        rootReducer,\r\n        initialState,\r\n         applyMiddleware(thunk)\r\n    );\r\n}"],"sourceRoot":""}